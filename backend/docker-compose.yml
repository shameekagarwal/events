services:
  # attend service
  attend:
    restart: always
    build:
      context: attend
      dockerfile: Dockerfile.dev
    volumes:
      - /app/node_modules
      - ./attend:/app
    environment:
      POSTGRES_HOST: attend-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: attend-db-password
      POSTGRES_DATABASE: postgres
      NODE_ENV: dev
      JWT_SECRET: jwt-secret
      RABBITMQ_URL: ${RABBITMQ_URL}
  attend-db:
    image: postgres
    environment:
      POSTGRES_PASSWORD: attend-db-password

  # auth service
  auth:
    restart: always
    build:
      context: auth
      dockerfile: Dockerfile.dev
    volumes:
      - /app/node_modules
      - ./auth:/app
    environment:
      POSTGRES_HOST: auth-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: auth-db-password
      POSTGRES_DATABASE: postgres
      NODE_ENV: dev
      JWT_SECRET: jwt-secret
  auth-db:
    image: postgres
    environment:
      POSTGRES_PASSWORD: auth-db-password

  # event service
  event:
    restart: always
    build:
      context: event
      dockerfile: Dockerfile.dev
    volumes:
      - /app/node_modules
      - ./event:/app
    environment:
      POSTGRES_HOST: event-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: event-db-password
      POSTGRES_DATABASE: postgres
      NODE_ENV: dev
      JWT_SECRET: jwt-secret
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      RABBITMQ_URL: ${RABBITMQ_URL}
  event-db:
    image: postgres
    environment:
      POSTGRES_PASSWORD: event-db-password

  # query service
  query:
    restart: always
    build:
      context: query
      dockerfile: Dockerfile.dev
    volumes:
      - /app/node_modules
      - ./query:/app
    environment:
      POSTGRES_HOST: query-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: query-db-password
      POSTGRES_DATABASE: postgres
      NODE_ENV: dev
      JWT_SECRET: jwt-secret
      RABBITMQ_URL: ${RABBITMQ_URL}
  query-db:
    image: postgres
    environment:
      POSTGRES_PASSWORD: query-db-password

  # reverse proxy
  reverse-proxy:
    build:
      context: reverse-proxy
      dockerfile: Dockerfile.dev
    ports:
      - 3000:80
